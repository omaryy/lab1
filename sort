package eg.edu.alexu.csd.filestructure.sort;

import java.rmi.Remote;
import java.util.ArrayList;
import java.util.Collections;

public class Sorting implements ISort {

	public void heapify(ArrayList<Integer> unordered,int n,int i)
	{
		int largest=i;
		int l=2*i+1;
		int r=2*i+2;
		if(l<n&&unordered.get(l)>unordered.get(largest))
		{
			largest=l;
			
		}
		
		if(r<n&&unordered.get(r)>unordered.get(largest))
		{
			largest=r;
		}
	if(largest!=i)
	{
		Collections.swap(unordered, i, largest);
		heapify(unordered, n, largest);
		
	}
	
		
	}
	public IHeap heapSort(ArrayList  unordered) {
		for (int i = (unordered.size() / 2) - 1; i >= 0; i--) 
	        heapify(unordered, unordered.size(), i); 
	  
	    // One by one extract an element from heap 
	    for (int i=unordered.size()-1; i>=0; i--) 
	    { 
	        // Move current root to end 
	        
	    	Collections.swap(unordered, 0, i);
	        // call max heapify on the reduced heap 
	        heapify(unordered, i, 0); 
	    } 
		return null;
	}

	@Override
	public void sortSlow(ArrayList unordered) {
		for(int i=0;i<unordered.size()-1;i++)
		{
			for(int j=i+1;j<unordered.size();j++)
			{
				if((int)unordered.get(i)>(int)unordered.get(j))
				{
					Collections.swap(unordered, i, j);
				}
			}
		}
	}

	@Override
	public void sortFast(ArrayList unordered) {
		sort(unordered, 0, unordered.size()-1);
	}
	 public void sort(ArrayList unorderd, int l, int r) 
	    { 
	        if (l < r) 
	        { 
	            
	            int m = (l+r)/2; 
	            sort(unorderd, l, m); 
	            sort(unorderd , m+1, r); 
	  
	          
	            merge(unorderd, l, m, r); 
	        } 
	    } 
	public void merge(ArrayList unorderd, int l, int m, int r) 
	{ 
        int n1 = m - l + 1; 
        int n2 = r - m; 
  
        
        int L[] = new int [n1]; 
        int R[] = new int [n2]; 
  
   
        for (int i=0; i<n1; ++i) 
            L[i] = (int) unorderd.get(l + i); 
        for (int j=0; j<n2; ++j) 
            R[j] = (int) unorderd.get(m + 1+ j); 

        int i = 0, j = 0; 
 
        int k = l; 
        while (i < n1 && j < n2) 
        { 
            if (L[i] <= R[j]) 
            { 
            	unorderd.remove(k);
                unorderd.add(k, L[i]); 
                i++; 
            } 
            else
            { 
            	unorderd.remove(k);
                unorderd.add(k,R[j]);
                j++; 
            } 
            k++; 
        } 

        while (i < n1) 
        { 
        	unorderd.remove(k);
           unorderd.add(k, L[i]); 
            i++; 
            k++; 
        } 
  
  
        while (j < n2) 
        { 
        	unorderd.remove(k);
            unorderd.add(k, R[j]);
            j++; 
            k++; 
        } 
    }
	
	}
